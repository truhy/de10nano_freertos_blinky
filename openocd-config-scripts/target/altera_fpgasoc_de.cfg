# Altera cyclone V SoC family, 5Cxxx
# Note: This is for Intel/Terasic DE series boards, which has a different JTAG chain order: FPGA, DAP then CPU,
# to Altera/Arrow Cyclone V SocKit order: DAP, FPGA, then CPU

proc c5_dbginit {{target fpgasoc.cpu.0}} {
	echo "c5_dbginit: Issuing Cortex-A series debug initialisations"
	$target cortex_a dbginit
	$target cortex_a dacrfixup on
	#$target cortex_a maskisr on
}
proc c5_cache {{enable 0} {target fpgasoc.cpu.0}} {
	set r [$target arm mrc 15 0 1 0 0]
	set mask [expr {1 << 12 | 1 << 11 | 1 << 2 | 1 << 0}]
	if {$enable == 0} {
		echo "c5_cache: Disabling MMU, i-cache & d-cache"
		set r [expr {($r & ~$mask)}]
	} else {
		echo "c5_cache: Enabling MMU, i-cache & d-cache"
		set r [expr {($r | $mask)}]
		echo $r
	}
	$target arm mcr 15 0 1 0 0 $r
}
proc c5_core1 {{enable 1} {target fpgasoc.cpu.0}} {
	set RSTMGR_MPUMODRST_ADDR 0xffd05010

	set r [$target mdw phys $RSTMGR_MPUMODRST_ADDR]
	set r [expr 0x[lindex [split $r " "] 1]]

	if {$enable} {
		set mask [expr 0xfffffffd]
		set r [expr {($r & $mask)}]
		
		echo "c5_core1: Enabling core 1 (mww phys $RSTMGR_MPUMODRST_ADDR [format 0x%.8x $r])"
	} else {
		set mask [expr 0x00000002]
		set r [expr {($r & $mask)}]
		
		echo "c5_core1: Disabling core 1 (mww phys $RSTMGR_MPUMODRST_ADDR [format 0x%.8x $r])"
	}
	$target mww phys $RSTMGR_MPUMODRST_ADDR $r
}
proc c5_reset {{cold 0} {target fpgasoc.cpu.0}} {
	set RSTMGR_CTRL_ADDR 0xffd05004

	arm core_state arm;

	if {$cold} {
		set r [$target mdw phys $RSTMGR_CTRL_ADDR]
		set r [expr 0x[lindex [split $r " "] 1]]
		set mask [expr 0x00000001]
		set r [expr {($r | $mask)}]
		
		echo "c5_reset: Cold resetting (mww phys $RSTMGR_CTRL_ADDR [format 0x%.8x $r])"
	} else {
		set r [$target mdw phys $RSTMGR_CTRL_ADDR]
		set r [expr 0x[lindex [split $r " "] 1]]
		set mask [expr 0x00000002]
		set r [expr {($r | $mask)}]
		
		echo "c5_reset: Soft resetting (mww phys $RSTMGR_CTRL_ADDR [format 0x%.8x $r])"
	}
	$target mww phys $RSTMGR_CTRL_ADDR $r
	sleep 25
	
	c5_dbginit $target
	#halt
	#arm core_state arm
}
proc c5_spl {uboot_file {spl_entry 0xffff0000}} {
	arm core_state arm

	echo "c5_spl: Loading U-Boot SPL"
	load_image $uboot_file
	
	echo "c5_spl: Executing U-Boot SPL at $spl_entry"
	resume $spl_entry
}
proc c5_smp_setup {{rtos_type hwthread}} {
	global _CHIPNAME
	global _cores
	global _smp_command
	
	echo "c5_smp_setup: Setting up SMP support ($rtos_type)"
	
	eval $_smp_command
	
	for { set _core 0 } { $_core < $_cores } { incr _core } {
		set _TARGETNAME $_CHIPNAME.cpu.$_core
		$_TARGETNAME configure -rtos $rtos_type
	}
}

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME fpgasoc
}

if { [info exists CHIPCORES] } {
	set _cores $CHIPCORES
} else {
	set _cores 2
}

if { [info exists FPGA_TAPID] } {
	set _FPGA_TAPID $FPGA_TAPID
	jtag newtap $_CHIPNAME.fpga tap -irlen 10 -ircapture 0x01 -irmask 0x3 -expected-id $_FPGA_TAPID
} else {
	# Declares a new JTAG TAP that will connect if the IDCODE matches with one in the list of expected-id (See Ch9 of Cyclone V Device Handbook)
	jtag newtap $_CHIPNAME.fpga tap -irlen 10 -ircapture 0x01 -irmask 0x3 \
		-expected-id 0x02b150dd \
		-expected-id 0x02b050dd \
		-expected-id 0x02b220dd \
		-expected-id 0x02b130dd \
		-expected-id 0x02b140dd \
		-expected-id 0x02b010dd \
		-expected-id 0x02b120dd \
		-expected-id 0x02b020dd \
		-expected-id 0x02b030dd \
		-expected-id 0x02b040dd \
		-expected-id 0x02b020dd \
		-expected-id 0x02b030dd \
		-expected-id 0x02b040dd \
		-expected-id 0x02d110dd \
		-expected-id 0x02d010dd \
		-expected-id 0x02d120dd \
		-expected-id 0x02d020dd \
		-expected-id 0x02d110dd \
		-expected-id 0x02d010dd \
		-expected-id 0x02d120dd \
		-expected-id 0x02d020dd \
		-expected-id 0x02d120dd \
		-expected-id 0x02d020dd
}

# CoreSight Debug Access Port
if { [info exists DAP_TAPID] } {
		set _DAP_TAPID $DAP_TAPID
} else {
		set _DAP_TAPID 0x4ba00477
}
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x01 -irmask 0x0f -expected-id $_DAP_TAPID

dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

# MEM-AP for memory map access
#target create $_CHIPNAME.ap mem_ap -dap $_CHIPNAME.dap -ap-num 0

# Base addresses of CoreSight Debug and Cross-Trigger Interface for each of the cores
set _DBGBASE { 0x80110000 0x80112000 }
#set _CTIBASE { 0x80118000 0x80119000 }

set _smp_command "target smp"

for { set _core 0 } { $_core < $_cores } { incr _core } {
	#set _CTINAME $_CHIPNAME.cti$_core
	set _TARGETNAME $_CHIPNAME.cpu.$_core

	#cti create $_CTINAME -dap $_CHIPNAME.dap -ap-num 0 -baseaddr [lindex $_CTIBASE $_core]
	target create $_TARGETNAME cortex_a -dap $_CHIPNAME.dap -coreid $_core -dbgbase [lindex $_DBGBASE $_core]
	$_TARGETNAME configure -event reset-assert-post { c5_dbginit $_TARGETNAME }

	set _smp_command "$_smp_command $_TARGETNAME"
}

# Oddly, OpenOCD selects the highest core as default, we want the first core
targets $_CHIPNAME.cpu.0

# Enable core 1
#init
#halt
#c5_core1
#resume
